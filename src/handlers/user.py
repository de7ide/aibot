import asyncio
import os

from aiogram import Bot, Router, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import CommandStart

from database.orm_query import Database
from config_data import Config, load_config
from keyboards.kb import get_callback_btns, get_payment_kb
from services.anthropic_api import process_image


user_router = Router()
config: Config = load_config()

dowload_dir = "downloads"
os.makedirs(dowload_dir, exist_ok=True)


class WaitState(StatesGroup):
    wait_photo = State()


class BuyingState(StatesGroup):
    choise_tarif = State()


@user_router.message(CommandStart())
async def start_comm(message: Message, db: Database, state: FSMContext):
    await state.clear()
    start_text = await db.get_start_message()
    await message.answer(start_text)
    await db.add_user(
        id=message.from_user.id,
        username=message.from_user.username
    )


@user_router.message(F.photo)
async def handle_image(message: Message, db: Database, state: FSMContext):
    await state.clear()
    photo = message.photo[-1]
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
    analisis_mess = await db.get_analysis_message()
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–¥ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª–∑–æ–≤–∞–Ω–∏—è(–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞ –≤–ø–µ—Ä–≤—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–±–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)
    tokens = await db.get_available_tokens(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    file_info = await message.bot.get_file(photo.file_id)
    file_path = file_info.file_path
    local_filename = os.path.join("downloads", f"{message.from_user.id}.jpg")
    await state.update_data(file_info=file_info)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    await message.bot.download_file(file_path, local_filename)

    # –ï—Å–ª–∏ available_token —É —é–∑–µ—Ä–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ 0, —Ç–æ –±–æ—Ç –¥–µ–ª–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if tokens > 0:
        await message.answer(analisis_mess)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ ChatGPT API
        response = await process_image(image_url=f"https://api.telegram.org/file/bot{config.tg_bot.token}/{file_info.file_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º
        if isinstance(response, str):
            await message.answer(response, reply_markup=get_callback_btns(btns={
                "–ï—â–µ –º–Ω–µ–Ω–∏–µ" : "another_opinion"}))
            # –° –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Å—á–µ—Ç—á–∏–∫ count_to_token –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –Ω–∞ 1, –∞ available_token —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 1
            await db.add_count_to_token(id=message.from_user.id)
        else:
            error_text = response.get("error", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"–û—à–∏–±–∫–∞: {error_text}")

    # –ï—Å–ª–∏ available_token = 0, —Ç–æ –º—ã –≤—ã–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
    else:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–¥
        products = await db.get_all_product()
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        btns = {product.name : f"product_id_{product.id}" for product in products}
        await state.set_state(BuyingState.choise_tarif)
        await message.answer("–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –Ø —Ç–∞–∫ —Ä–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –º–æ–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞! –ü–æ–¥–¥–µ—Ä–∂–∏ –º–æ—é —Ä–∞–±–æ—Ç—É –Ω–µ–±–æ–ª—å—à–∏–º –±–æ–Ω—É—Å–æ–º, –º–Ω–µ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ üôè –∏ –º–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã, –Ω–∞ –º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.",
                             reply_markup=get_callback_btns(btns=btns))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ –º–Ω–µ–Ω–∏–µ"
@user_router.callback_query(F.data == "another_opinion")
async def another_opinion_pressed(callback: CallbackQuery, db: Database, state: FSMContext):
    await callback.answer()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä—ã–π –º—ã –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ "file_path"
    data = await state.get_data()
    file_info = data.get("file_info")
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º(–∏–∑ –ë–î)
    analysis_mess = await db.get_analysis_message()
    # –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞(–∏–∑ –ë–î)
    tokens = await db.get_available_tokens(callback.from_user.id)

    await callback.message.bot.download_file(file_info.file_path, f"downloads/{callback.from_user.id}.jpg")
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–æ—Ç–æ
    if tokens > 0:
        await callback.message.answer(analysis_mess)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ ChatGPT API
        response = await process_image(image_url=f"https://api.telegram.org/file/bot{config.tg_bot.token}/{file_info.file_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º
        if isinstance(response, str):
            await callback.message.answer(response)
            await db.add_count_to_token(id=callback.from_user.id)
        else:
            error_text = response.get("error", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {error_text}")

    # –ï—Å–ª–∏ available_token = 0, —Ç–æ –º—ã –≤—ã–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
    else:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–¥
        products = await db.get_all_product()
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        btns = {product.name : f"product_id_{product.id}" for product in products}
        await state.set_state(BuyingState.choise_tarif)
        await callback.message.answer("–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –Ø —Ç–∞–∫ —Ä–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –º–æ–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞! –ü–æ–¥–¥–µ—Ä–∂–∏ –º–æ—é —Ä–∞–±–æ—Ç—É –Ω–µ–±–æ–ª—å—à–∏–º –±–æ–Ω—É—Å–æ–º, –º–Ω–µ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ üôè –∏ –º–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã, –Ω–∞ –º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.",
                                    reply_markup=get_callback_btns(btns=btns))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞, –≤—ã–±–∏—Ä–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@user_router.callback_query(F.data.startswith("product_id_"), BuyingState.choise_tarif)
async def choise_product_button(callback: CallbackQuery, db: Database):
    product_id = callback.data.split("_")[-1]
    product = await db.get_product_by_id(product_id=product_id)
    await callback.message.edit_text(f"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n{product.description}\n\n–¶–µ–Ω–∞: <b>{product.price}</b>—Ä—É–±.",
                                     reply_markup=get_callback_btns(btns={"–û–ø–ª–∞—Ç–∏—Ç—å": f"buy_{product_id}_{product.price}"}))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä—Ñ–∞
@user_router.callback_query(F.data.startswith("buy_"))
async def buy_product_press(callback: CallbackQuery, db: Database, bot: Bot, state: FSMContext):
    await state.clear()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —é–∑–µ—Ä–∞ –∏–∑ –±–¥
    user_info = await db.get_user_by_id(user_id=callback.from_user.id)
    _, product_id, price = callback.data.split('_')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –æ–ø–ª–∞—Ç—ã
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=f"–û–ø–ª–∞—Ç–∞ {price}‚ÇΩ",
        description=f"–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É, –≤ —Ä–∞–∑–º–µ—Ä–µ {price}‚ÇΩ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ê—Ä—Ç–∏–∏",
        payload=f"{user_info.id}_{product_id}",
        provider_token=config.tg_bot.yookassa,
        currency="RUB",
        prices=[LabeledPrice(
            label=f"–û–ø–ª–∞—Ç–∞ {price}",
            amount=int(price) * 100
        )],
        reply_markup=get_payment_kb(price=price)
    )
    await callback.message.delete()


@user_router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@user_router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message, db: Database):
    payment_info = message.successful_payment
    user_id, product_id, = payment_info.invoice_payload.split('_')
    payment_data = {
        "user_id": int(user_id),
        "payment_id": payment_info.telegram_payment_charge_id,
        "price": payment_info.total_amount / 100,
        "product_id": int(product_id)
    }
    await db.add_purchase(data=payment_data)
    product_data = await db.get_product_by_id(product_id=product_id)

    product_text = (
        f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
        f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ:</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <b>{product_data.name}</b>\n"
        f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product_data.description}</i>\n"
        f"üîπ <b>–¶–µ–Ω–∞:</b> <b>{product_data.price} ‚ÇΩ</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    )
    await db.set_available_token(user_id=message.from_user.id, tokens=2)
    await message.answer(
        text=product_text
    )